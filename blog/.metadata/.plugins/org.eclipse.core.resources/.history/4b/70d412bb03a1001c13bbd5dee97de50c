package com.klog.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.zerock.domain.AttachFileDTO;

import com.klog.domain.MemberVO;
import com.klog.service.MemberServiceImpl;

import lombok.extern.log4j.Log4j;
import net.coobird.thumbnailator.Thumbnailator;

@RestController
@Log4j
public class MainRestController {

	@Autowired
	private MemberServiceImpl service;

	@PostMapping("/user/reg")
	public int memberReg(MemberVO member) {

		return service.memberReg(member);
	}

	@PostMapping("/user/EmailCheck")
	public int EmailCheck(@RequestParam("email") String email) {
		log.info("이메일 확인" + email);

		return service.EmailCheckSev(email);
	}

	@PostMapping("/user/NameCheck")
	public int NameCheck(@RequestParam("m_name") String m_name) {
		log.info("이름 확인: " + m_name);

		return service.NameChekSev(m_name);
	}

	@PostMapping("/user/login")
	public int memberLogin(String email, String password) {

		return service.memberlogin(email, password);
	}

	@PostMapping("/user/verifyes")
	public int ChangeVeridy(String email) {

		return service.UserVerify(email);
	}

	@PostMapping("/user/ChangePwMail")
	public int ChangePasswordMail(String email) {

		return service.PasswordMail(email);
	}

	@PostMapping("/user/ChangePw")
	public int ChangePassword(String email, String password) {

		return service.UserPassword(email, password);
	}

	// 오늘 날짜의 경로를 문자열로 생성
	private String getFolder() {

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

		Date date = new Date();

		String str = sdf.format(date);

		return str.replace("-", File.separator);
	}

	// 일단 사진만 먼저 확인
	@PostMapping(value = "/user/InfoChange", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public void uploadAjaxPots(MultipartFile uploadFile) {

		log.info("update ajax post ............ ");
		String uploadFolder = "C:\\UserImage";

		String uploadFolderPath = getFolder();
		// make Filder
		File uploadPath = new File(uploadFolder, uploadFolderPath);
		log.info("uploadPath : " + uploadPath);

		// 해당 경로가 있는지 확인하고 없으면 생성
		if (uploadPath.exists() == false) {
			uploadPath.mkdirs();
		}

		//AttachFileDTO attachDTO = new AttachFileDTO();
		MemberVO member = new MemberVO();

		log.info("==========================");
		log.info("Upload File Name : " + uploadFile.getOriginalFilename());
		log.info("Upload FIle Size : " + uploadFile.getSize());

		String uploadFileName = uploadFile.getOriginalFilename();

		// IE has file path
		uploadFileName = uploadFileName.substring(uploadFileName.lastIndexOf("\\") + 1);
		log.info("only file name : " + uploadFileName);
		//attachDTO.setFileName(uploadFileName);
		member.setM_pic(uploadFileName);

		// 중복 방지를 위한 UUID 적용
		UUID uuid = UUID.randomUUID();
		log.info("uuid : " + uuid);

		// 생성된 UUID_원래 이름
		uploadFileName = uuid.toString() + "_" + uploadFileName;
		log.info("UUID 추가된 이름" + uploadFileName);

		// File saveFile = new File(uploadFolder, uploadFileName);

		try {
			File saveFile = new File(uploadPath, uploadFileName);
			uploadFile.transferTo(saveFile);

			//attachDTO.setUuid(uuid.toString());
			//attachDTO.setUploadPath(uploadFolderPath);

			log.info("member 사진 이름 : " + member.getM_pic());

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}
