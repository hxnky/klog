/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.61
 * Generated at: 2022-03-09 13:08:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Repw_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>KLOG • 비밀번호 변경</title>\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Jua&display=swap\"\r\n");
      out.write("\trel=\"stylesheet\">\r\n");
      out.write("<style>\r\n");
      out.write(".pw_main {\r\n");
      out.write("\tbackground-color: #bd5d38;\r\n");
      out.write("\theight: 300px;\r\n");
      out.write("\tmargin-top: 150px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".pw_inner {\r\n");
      out.write("\tpadding-top: 40px;\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".pw_st {\r\n");
      out.write("\tfont-family: 'Jua', sans-serif;\r\n");
      out.write("\tfont-size: 20px;\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\theight: 50px;\r\n");
      out.write("\tmargin-top: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".pw_chk {\r\n");
      out.write("\tfont-family: 'Jua', sans-serif;\r\n");
      out.write("\tfont-size: 20px;\r\n");
      out.write("\tcolor: white;\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("\tmargin-left: 90px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".pwchange {\r\n");
      out.write("\theight: 30px;\r\n");
      out.write("\twidth: 300px;\r\n");
      out.write("\tmargin-left: 40px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".pw_btn {\r\n");
      out.write("\twidth: 300px;\r\n");
      out.write("\theight: 50px;\r\n");
      out.write("\tborder: none;\r\n");
      out.write("\tborder-radius: 5px;\r\n");
      out.write("\tbackground-color: floralwhite;\r\n");
      out.write("\tfont-family: 'Jua', sans-serif;\r\n");
      out.write("\tfont-size: 20px;\r\n");
      out.write("\tmargin-top: 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".pw_btn:hover{\r\n");
      out.write("\tcursor: pointer;\r\n");
      out.write("\ttext-decoration: underline;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"pw_main\">\r\n");
      out.write("\t\t<div class=\"pw_inner\">\r\n");
      out.write("\t\t\t<div class=\"pw_st\">\r\n");
      out.write("\t\t\t\t새 비밀번호 <input type=\"password\" id=\"password\" name=\"password\"\r\n");
      out.write("\t\t\t\t\tclass=\"pwchange\" required oninput='checkPw()'>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"pw_st\">\r\n");
      out.write("\t\t\t\t비밀번호 확인 <input type=\"password\" id=\"password_chk\" name=\"password\"\r\n");
      out.write("\t\t\t\t\tclass=\"pwchange\" required oninput='checkPw()'> <span\r\n");
      out.write("\t\t\t\t\tclass=\"pw_chk\">비밀번호가 일치하지 않습니다.</span>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<button class=\"pw_btn\" id=\"pw_submit\">비밀번호 변경</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-3.6.0.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t//url의 이메일 가져오기\r\n");
      out.write("\t\tfunction getParameterByName(name) {\r\n");
      out.write("\t\t\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\r\n");
      out.write("\t\t\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"), results = regex\r\n");
      out.write("\t\t\t\t\t.exec(location.search);\r\n");
      out.write("\t\t\treturn results == null ? \"\" : decodeURIComponent(results[1]\r\n");
      out.write("\t\t\t\t\t.replace(/\\+/g, \" \"));\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 비밀번호 일치하는지 확인\r\n");
      out.write("\t\tfunction checkPw() {\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar password = $(\"#password\").val();\r\n");
      out.write("\t\t\tvar pw_chk = $(\"#password_chk\").val();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t if (password != pw_chk) {\r\n");
      out.write("\t\t\t\t$('.pw_chk').css(\"display\", \"block\");\r\n");
      out.write("\t\t\t} else if(password == pw_chk || pw_chk.length == 0) {\r\n");
      out.write("\t\t\t\t$('.pw_chk').css(\"display\", \"none\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t$(document).ready(function() {\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar email = getParameterByName('email');\r\n");
      out.write("\r\n");
      out.write("\t\t\t$(\"#pw_submit\").on(\"click\", function(e) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tvar password = $(\"#password\").val();\r\n");
      out.write("\t\t\t\tvar pw_chk = $(\"#password_chk\").val();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tif(password.length==0 || pw_chk.length==0){\r\n");
      out.write("\t\t\t\t\talert(\"비밀번호를 입력하세요\");\r\n");
      out.write("\t\t\t\t} else if (password != pw_chk) {\r\n");
      out.write("\t\t\t\t\talert(\"비밀번호가 일치하지 않습니다.\");\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t// 비밀번호 변경\r\n");
      out.write("\t\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\t\turl : \"/user/ChangePw\",\r\n");
      out.write("\t\t\t\t\t\tdata : {\r\n");
      out.write("\t\t\t\t\t\t\t\"password\" : password,\r\n");
      out.write("\t\t\t\t\t\t\t\"email\" : email\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\ttype : \"POST\",\r\n");
      out.write("\t\t\t\t\t\tdataType : \"json\",\r\n");
      out.write("\t\t\t\t\t\tasync : false,\r\n");
      out.write("\t\t\t\t\t\tsuccess : function(result) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tconsole.log(result);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (result == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\talert(\"비밀번호가 변경되었습니다.\");\r\n");
      out.write("\t\t\t\t\t\t\t\t// 로그인화면으로 이동?\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\terror : function(e) {\r\n");
      out.write("\t\t\t\t\t\t\t// 전송 후 에러 발생 시 실행 코드\r\n");
      out.write("\t\t\t\t\t\t\tconsole.log(\"ERROR : \", e);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}); // end ajax \r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
